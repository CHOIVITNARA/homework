이렇게 불편하고 활용도가 없는 추상화된 것들을 더 잘 쓰기 위해 규칙들을 재정의하고 잘 써보자 해서 만든게 인터페이스.

인터페이스는 메서드의 기본형은 추상으로 쓴다.

ex) (abstract) void disp();

일반적인 메서드를 사용하려면 앞에 default를 붙여줘야 한다. 혹은 static을 붙이면 바디가 있는 걸 사용가능.

ex) dafault void aaa() {}

static void bbb(){ }

인터페이스는 생성자가 존재하지 않는다.

있어도 활용도 하지 못하고 불편하기 때문에

인터페이스는 변수를 생성하면 final 키워드가 명시되어있지는 않지만 적용 되어 있다.

인터페이스에서 변수는 static을 해야 사용이 가능하기 때문에 명시하지 않아도 생략되어있다. 순서는 바꿔도 상관없음.

인터페이스는 추상클래스와 거의 흡사하다.

인터페이스는 상속을 할 수 없다.

 

클래스는 상속을 받을때 인터페이스에서 받는 것은 불가하다.

해결 방법은 두가지인데 인터페이스를 클래스로 변경하거나 자식클래스에서 extends 대신 implements(구현하다)로 변경하면 가능하다.

하지만 인터페이스는 공용구조로 되어있어 사용하고 있기 때문에 상속이 의미가 없다.

인터페이스의 가장 큰 특징은 다중상속을 받게 만들어 줄 수 있다.

ex) public class 자식클래스 implements 슈퍼인터페이스1, 슈퍼인터페이스2 (o)

인터페이스끼리는 상속할때 extends를 사용하여 상속 가능.

인터페이스 내에서는 다중상속은 가능하다.

ex) 자식인터페이스 extend 슈퍼인터페이스1. 슈퍼인터페이스2 (O)

클래스에서 인터페이스를 상속받을 경우에는 오버라이드를 해줘야 함. 바디가 없는 메서드이기 때문.

//자바에서 인터페이스는 객체의 사용 방법을 정의한 타입이다.

//인터페이스를 통해 다양한 객체를 동일한 사용방법으로 이용합니다.

//클래스에 구현해서 객체 생성 가능
